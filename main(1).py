# -*- coding: utf-8 -*-
"""Untitled1(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1azhzqwLizKPJo5vIrggjYOI3VgPH50ky
"""

# WORKING CHATBOT + API DEBUGGER
import gradio as gr
import traceback
from datetime import datetime

# Your API key
API_KEY = 'AIzaSyBQXPfWI6etj89lYogiBgL2mokBudO2zV0'

# Global status
api_status = "❌ Not tested yet"
model = None
last_error = ""

def test_api_detailed():
    """Detailed API test with full error reporting"""
    global api_status, model, last_error

    try:
        print("🔍 Testing API step by step...")

        # Step 1: Install
        import subprocess
        result = subprocess.run(['pip', 'install', '-q', 'google-generativeai'],
                              capture_output=True, text=True, timeout=30)
        print(f"📦 Install result: {result.returncode}")

        # Step 2: Import
        import google.generativeai as genai
        print("✅ Import successful")

        # Step 3: Configure
        genai.configure(api_key=API_KEY)
        print("✅ API key configured")

        # Step 4: Try different models (gemini-pro might be deprecated)
        model_names = ['gemini-1.5-flash', 'gemini-1.5-pro', 'gemini-pro']

        for model_name in model_names:
            try:
                print(f"🧪 Trying model: {model_name}")
                model = genai.GenerativeModel(model_name)
                print(f"✅ Model created: {model_name}")
                break
            except Exception as e:
                print(f"❌ {model_name} failed: {e}")
                continue
        else:
            raise Exception("All models failed to load")

        # Step 5: Test generation with timeout
        print("🧪 Testing actual generation...")
        response = model.generate_content(
            "Say exactly: Hello I am working",
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=20,
                temperature=0
            ),
            request_options={"timeout": 10}  # 10 second timeout
        )

        print(f"📝 Response object: {type(response)}")
        print(f"📝 Response text: {response.text}")
        print(f"🎯 Using model: {model.model_name if hasattr(model, 'model_name') else 'unknown'}")

        if response and response.text:
            api_status = "✅ API WORKING!"
            return True, f"✅ SUCCESS! Gemini said: '{response.text}'"
        else:
            api_status = "❌ Empty response"
            return False, "❌ API responded but returned empty text"

    except Exception as e:
        error_details = traceback.format_exc()
        last_error = str(e)
        api_status = f"❌ Error: {str(e)[:50]}..."

        print(f"❌ Full error: {error_details}")

        # Common error messages
        if "API_KEY" in str(e):
            return False, "❌ API KEY ERROR: Your key might be invalid or expired"
        elif "quota" in str(e).lower():
            return False, "❌ QUOTA ERROR: You might have exceeded API limits"
        elif "timeout" in str(e).lower():
            return False, "❌ TIMEOUT ERROR: API is responding too slowly"
        elif "permission" in str(e).lower():
            return False, "❌ PERMISSION ERROR: API key doesn't have access"
        else:
            return False, f"❌ UNKNOWN ERROR: {str(e)}"

def smart_response(message):
    """Always working smart responses"""
    msg = message.lower().strip()

    responses = {
        "hello": "👋 **Hello there!** I'm VirtuTA, your AI teaching assistant!\n\n🎓 I can help you with:\n• **Programming** (Python, Java, algorithms)\n• **Mathematics** (calculus, algebra, statistics)\n• **Sciences** (physics, chemistry, biology)\n• **Study tips** and learning strategies\n\nWhat would you like to learn today?",

        "help": "🆘 **I'm here to help!** Here's what I can do:\n\n📚 **Explain Concepts**\n• Break down complex topics\n• Provide step-by-step explanations\n• Give real-world examples\n\n🧮 **Solve Problems**\n• Math equations and proofs\n• Programming challenges\n• Science problems\n\n💡 **Study Support**\n• Learning strategies\n• Exam preparation tips\n• Time management advice\n\nJust ask me anything!",

        "programming": "💻 **Programming Help Available!**\n\n🐍 **Languages I can help with:**\n• Python, Java, C++, JavaScript\n• HTML/CSS, SQL, R\n\n🧠 **Topics I cover:**\n• Data structures & algorithms\n• Object-oriented programming\n• Debugging techniques\n• Best practices\n\n📝 **What I can do:**\n• Explain code concepts\n• Help debug errors\n• Suggest improvements\n• Provide examples\n\nWhat programming topic interests you?",

        "math": "🔢 **Mathematics Assistance Ready!**\n\n📊 **Areas I specialize in:**\n• Calculus (derivatives, integrals)\n• Algebra (equations, functions)\n• Statistics & probability\n• Linear algebra\n• Discrete mathematics\n\n⚡ **How I help:**\n• Step-by-step solutions\n• Concept explanations\n• Practice problems\n• Exam preparation\n\nWhat math topic can I help clarify?",

        "science": "🔬 **Science Help Available!**\n\n🧪 **Subjects I cover:**\n• Physics (mechanics, electromagnetism)\n• Chemistry (organic, inorganic, physical)\n• Biology (cell biology, genetics, ecology)\n• Earth sciences\n\n🎯 **My approach:**\n• Clear explanations\n• Visual analogies\n• Practice problems\n• Real-world applications\n\nWhich science topic interests you?",

        "study": "📖 **Study Strategies & Tips!**\n\n🎯 **Effective Study Methods:**\n• Spaced repetition for memorization\n• Active recall techniques\n• Pomodoro technique for focus\n• Mind mapping for connections\n\n⏰ **Time Management:**\n• Creating study schedules\n• Prioritizing tasks\n• Breaking down large topics\n• Managing procrastination\n\n✅ **Exam Preparation:**\n• Practice test strategies\n• Review techniques\n• Stress management\n\nWhat specific study challenge can I help with?"
    }

    # Check for specific topics
    if any(word in msg for word in ["hello", "hi", "hey", "start"]):
        return responses["hello"]
    elif "help" in msg or "assist" in msg:
        return responses["help"]
    elif any(word in msg for word in ["program", "code", "algorithm", "python", "java"]):
        return responses["programming"]
    elif any(word in msg for word in ["math", "calculus", "algebra", "equation"]):
        return responses["math"]
    elif any(word in msg for word in ["science", "physics", "chemistry", "biology"]):
        return responses["science"]
    elif any(word in msg for word in ["study", "exam", "learn", "prepare"]):
        return responses["study"]
    else:
        return f"🤔 **Great question about:** *{message}*\n\n📚 I'd love to help explain that topic! To give you the best answer, could you tell me:\n\n• What specific aspect interests you most?\n• What's your current understanding level?\n• Is this for a particular course or project?\n\nThe more details you provide, the better I can tailor my explanation!"

def chat_function(message, history):
    """Main chat function that always works"""
    global api_status, model

    if not message.strip():
        return history, history

    # Always try smart response first (instant)
    smart_reply = smart_response(message)

    # Try Gemini if available
    gemini_reply = None
    if model:
        try:
            response = model.generate_content(
                f"You are VirtuTA, a helpful teaching assistant. Answer this student question clearly and helpfully: {message}",
                generation_config={'max_output_tokens': 300, 'temperature': 0.7}
            )
            if response and response.text:
                gemini_reply = response.text
        except Exception as e:
            print(f"Gemini failed: {e}")

    # Use best available response
    if gemini_reply:
        bot_response = f"🤖 **VirtuTA (AI Enhanced):**\n\n{gemini_reply}"
    else:
        bot_response = f"🤖 **VirtuTA (Smart Mode):**\n\n{smart_reply}"

    # Add to history
    history.append([message, bot_response])
    return history, history

def run_api_test():
    """Run API test and return results"""
    success, message = test_api_detailed()
    return message, api_status

def get_debug_info():
    """Get debug information"""
    return f"""🔍 **Debug Information:**

🔑 **API Key:** {API_KEY[:20]}...{API_KEY[-5:]}
📡 **Current Status:** {api_status}
❌ **Last Error:** {last_error or 'None'}
🤖 **Model Status:** {'Loaded' if model else 'Not loaded'}
⏰ **Time:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

💡 **Troubleshooting Tips:**
• Try clicking "Test API" button
• Check if your API key is valid at: https://makersuite.google.com/app/apikey
• Make sure you have API quota remaining
• Check your internet connection
"""

# Create working interface
with gr.Blocks(title="VirtuTA - Always Working!", css=".chatbot {height: 500px !important}") as demo:

    gr.HTML("""
    <div style="text-align: center; padding: 20px; background: linear-gradient(45deg, #FF6B35, #F7931E); color: white; border-radius: 15px; margin-bottom: 20px;">
        <h1>🎓 VirtuTA - AI Teaching Assistant</h1>
        <h3>✅ ALWAYS WORKING - Smart Responses Guaranteed!</h3>
        <p>Ask me anything - I'll help with or without the API!</p>
    </div>
    """)

    with gr.Row():
        with gr.Column(scale=3):
            chatbot = gr.Chatbot(
                label="💬 Chat with VirtuTA",
                height=500,
                show_label=True
            )

            msg = gr.Textbox(
                label="💭 Your Question",
                placeholder="Ask me anything! Try: 'Hello', 'Explain recursion', 'Help with calculus'",
                lines=3,
                max_lines=5
            )

            with gr.Row():
                send_btn = gr.Button("Send 🚀", variant="primary", scale=2)
                clear_btn = gr.Button("Clear 🗑️", scale=1)

        with gr.Column(scale=1):
            gr.Markdown("### 🔧 API Diagnostics")

            test_btn = gr.Button("🧪 Test Gemini API", variant="secondary")

            api_result = gr.Textbox(
                label="🔍 API Test Result",
                value="Click 'Test Gemini API' to check your key",
                lines=4,
                interactive=False
            )

            status_box = gr.Textbox(
                label="📊 Current Status",
                value=api_status,
                lines=2,
                interactive=False
            )

            debug_btn = gr.Button("🐛 Debug Info")

            debug_info = gr.Textbox(
                label="🔍 Debug Details",
                lines=8,
                interactive=False
            )

    # Example questions
    gr.Examples(
        examples=[
            ["Hello VirtuTA! How can you help me?"],
            ["Explain how binary search works"],
            ["Help me understand calculus derivatives"],
            ["What's the best way to study for programming exams?"],
            ["Can you help me debug this Python code?"]
        ],
        inputs=[msg],
        label="💡 Try These Examples (Click to Use)"
    )

    # Event handlers
    msg.submit(chat_function, [msg, chatbot], [chatbot, chatbot]).then(
        lambda: "", outputs=[msg]
    )

    send_btn.click(chat_function, [msg, chatbot], [chatbot, chatbot]).then(
        lambda: "", outputs=[msg]
    )

    clear_btn.click(lambda: ([], []), outputs=[chatbot, chatbot])

    test_btn.click(run_api_test, outputs=[api_result, status_box])

    debug_btn.click(get_debug_info, outputs=[debug_info])

    gr.HTML("""
    <div style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 10px;">
        <h4 style="color: #2d5a3d;">✅ This Chatbot ALWAYS Works!</h4>
        <p style="color: #2d5a3d; margin: 0;">Even if Gemini API fails, you'll get intelligent responses. Click "Test Gemini API" to diagnose any issues!</p>
    </div>
    """)

# Test API on startup
print("🧪 Testing your Gemini API...")
api_test_result = test_api_detailed()
print(f"🔍 API Test Result: {api_test_result}")

if __name__ == "__main__":
    print("🚀 Launching ALWAYS-WORKING VirtuTA...")
    print("💯 This version will respond to every message!")

    demo.launch(
        share=True,
        debug=True,
        show_error=True
    )

    print("✅ VirtuTA is live and ready!")
    print("💬 Try asking 'Hello' - you'll get a response no matter what!")

