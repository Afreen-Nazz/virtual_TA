# -*- coding: utf-8 -*-
"""va.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZuFY2L81iZnRKx4e5DvyldOveU-AbrId
"""

api='AIzaSyBQXPfWI6etj89lYogiBgL2mokBudO2zV0'

import gradio as gr
import json
import time
from datetime import datetime
import os

# Simple version without external dependencies for testing
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    print("⚠️ Gemini not installed. Install with: !pip install google-generativeai")

class VirtuTA:
    """Simplified Virtual Teaching Assistant"""

    def __init__(self):
        self.conversation_history = []
        self.session_start = datetime.now()
        self.gemini_enabled = False
        self.model = None

        if GEMINI_AVAILABLE:
            print("📦 Gemini library available")
        else:
            print("📦 Running in basic mode")

    def configure_gemini(self, api_key):
        """Configure Gemini with API key"""
        if not GEMINI_AVAILABLE:
            return "❌ Please install: !pip install google-generativeai"

        try:
            if api_key and api_key.strip():
                genai.configure(api_key=api_key.strip())
                self.model = genai.GenerativeModel('gemini-pro')
                self.gemini_enabled = True
                return "✅ Gemini AI activated successfully!"
            else:
                return "⚠️ Please enter a valid API key"
        except Exception as e:
            return f"❌ Gemini activation failed: {str(e)}"

    def generate_response(self, query, course="General", difficulty="Intermediate"):
        """Generate response using Gemini or fallback"""

        if not query or not query.strip():
            return "Please enter a question or message."

        # Add to history
        self.conversation_history.append({
            "time": datetime.now().strftime("%H:%M:%S"),
            "query": query,
            "course": course,
            "difficulty": difficulty
        })

        if self.gemini_enabled and self.model:
            return self._gemini_response(query, course, difficulty)
        else:
            return self._demo_response(query, course, difficulty)

    def _gemini_response(self, query, course, difficulty):
        """Generate response using Gemini AI"""
        try:
            prompt = f"""You are VirtuTA, a helpful Virtual Teaching Assistant for university students.

Context:
- Course: {course}
- Student Level: {difficulty}
- Query: {query}

Please provide a clear, educational response that:
1. Directly answers the student's question
2. Is appropriate for their level ({difficulty})
3. Includes examples when helpful
4. Encourages learning and understanding

Response:"""

            response = self.model.generate_content(prompt)

            if response.text:
                return f"🤖 **VirtuTA Response ({course} - {difficulty})**\n\n{response.text}\n\n---\n💡 Need clarification on anything? Just ask!"
            else:
                return "I couldn't generate a response. Please try rephrasing your question."

        except Exception as e:
            return f"❌ Error with Gemini API: {str(e)}\n\nPlease check your API key and try again."

    def _demo_response(self, query, course, difficulty):
        """Demo response when Gemini is not available"""

        demo_responses = {
            "greeting": f"👋 Hello! I'm VirtuTA, your Virtual Teaching Assistant for {course}. I'm here to help you learn at the {difficulty} level. How can I assist you today?",

            "explanation": f"""📚 **Explaining: {query}**

For {difficulty} level {course}, I would provide:

🔍 **Clear Definition**
- Break down the concept into understandable parts
- Use terminology appropriate for your level

📝 **Step-by-Step Breakdown**
- Logical progression from basic to advanced concepts
- Connect to what you already know

💡 **Examples & Applications**
- Real-world examples relevant to {course}
- Practice problems if applicable

🎯 **Key Takeaways**
- Summary of main points
- What to remember for exams/projects

*Note: This is demo mode. Activate Gemini AI for detailed, personalized responses!*""",

            "problem": f"""🧮 **Problem Solving Approach**

For this {course} problem at {difficulty} level:

**Step 1: Understanding** 🔍
- What information is given?
- What are we trying to find?
- What concepts apply?

**Step 2: Strategy** 📋
- Which method/formula to use?
- What's the solving approach?

**Step 3: Solution** ⚡
- Work through step-by-step
- Show all calculations

**Step 4: Check** ✅
- Does the answer make sense?
- Verify using alternative method

*For detailed problem solving, activate Gemini AI with your API key!*""",

            "general": f"""🎓 **VirtuTA Response**

**Your Question:** "{query}"
**Context:** {course} ({difficulty} level)

I can help you with:
- 📖 Concept explanations
- 🧮 Problem solving
- 📝 Study strategies
- 🔍 Research guidance
- 💡 Learning tips

**To get detailed AI responses:**
1. Get free API key: https://makersuite.google.com/app/apikey
2. Enter it in the settings panel
3. Click "Activate Gemini AI"

What specific aspect would you like me to help with?"""
        }

        query_lower = query.lower()

        if any(word in query_lower for word in ["hello", "hi", "hey"]):
            return demo_responses["greeting"]
        elif any(word in query_lower for word in ["solve", "calculate", "problem"]):
            return demo_responses["problem"]
        elif any(word in query_lower for word in ["explain", "what is", "define"]):
            return demo_responses["explanation"]
        else:
            return demo_responses["general"]

    def get_stats(self):
        """Get session statistics"""
        duration = (datetime.now() - self.session_start).total_seconds() / 60
        return f"""📊 **Session Statistics**
🔢 Queries: {len(self.conversation_history)}
⏱️ Active: {int(duration)} minutes
🤖 Mode: {"Gemini AI" if self.gemini_enabled else "Demo Mode"}"""

# Initialize VirtuTA
virtuta = VirtuTA()

def process_message(message, course, difficulty, history):
    """Process user message and return response"""
    if not message or not message.strip():
        return history, ""

    # Generate response
    response = virtuta.generate_response(message, course, difficulty)

    # Format conversation
    timestamp = datetime.now().strftime("%H:%M:%S")

    # Create formatted conversation entry
    student_entry = f"\n**👨‍🎓 [{timestamp}] Student:**\n{message}\n"
    ai_entry = f"\n{response}\n\n" + "="*50 + "\n"

    new_conversation = history + student_entry + ai_entry

    return new_conversation, ""  # Return updated history and clear input

def activate_gemini(api_key):
    """Activate Gemini AI"""
    return virtuta.configure_gemini(api_key)

def clear_chat():
    """Clear conversation history"""
    virtuta.conversation_history.clear()
    return "", "🗑️ Chat history cleared!"

def get_session_stats():
    """Get current session stats"""
    return virtuta.get_stats()

# Create Gradio Interface
def create_interface():
    """Create the Gradio interface"""

    with gr.Blocks(
        title="VirtuTA - Virtual Teaching Assistant",
        theme=gr.themes.Soft(),
        css="""
        .main-container { max-width: 1200px; margin: 0 auto; }
        .chat-box { min-height: 400px; max-height: 600px; }
        .input-box { min-height: 80px; }
        """
    ) as demo:

        gr.HTML("""
        <div style="text-align: center; padding: 20px; background: linear-gradient(90deg, #667eea, #764ba2); color: white; border-radius: 10px; margin-bottom: 20px;">
            <h1>🎓 VirtuTA - Virtual Teaching Assistant</h1>
            <h3>🚀 AI-Powered Educational Support</h3>
            <p>Get instant help with your coursework • Powered by Google Gemini AI</p>
        </div>
        """)

        with gr.Row():
            with gr.Column(scale=3):
                # Main chat interface
                chatbox = gr.Textbox(
                    label="💬 Conversation with VirtuTA",
                    placeholder="Your conversation will appear here...",
                    lines=20,
                    max_lines=25,
                    interactive=False,
                    elem_classes=["chat-box"]
                )

                # Input section
                with gr.Row():
                    user_input = gr.Textbox(
                        label="📝 Ask VirtuTA anything",
                        placeholder="Type your question here... (e.g., 'Explain binary search' or 'Help with calculus')",
                        lines=3,
                        scale=4,
                        elem_classes=["input-box"]
                    )
                    send_button = gr.Button(
                        "Send 🚀",
                        variant="primary",
                        scale=1,
                        size="lg"
                    )

                # Control buttons
                with gr.Row():
                    clear_button = gr.Button("🗑️ Clear Chat", variant="secondary")
                    stats_button = gr.Button("📊 Stats", variant="secondary")

            with gr.Column(scale=1):
                # Settings panel
                gr.Markdown("### ⚙️ Settings")

                api_input = gr.Textbox(
                    label="🔑 Gemini API Key",
                    placeholder="Enter your Google AI API key...",
                    type="password",
                    lines=1
                )

                activate_button = gr.Button("Activate Gemini AI", variant="primary")

                status_display = gr.Textbox(
                    label="📱 Status",
                    value="⚠️ Demo Mode Active\nEnter API key to unlock Gemini AI",
                    interactive=False,
                    lines=3
                )

                gr.Markdown("### 📚 Course Settings")

                course_selector = gr.Dropdown(
                    label="Subject",
                    choices=[
                        "General", "Computer Science", "Mathematics",
                        "Physics", "Chemistry", "Biology", "Engineering"
                    ],
                    value="Computer Science"
                )

                difficulty_selector = gr.Dropdown(
                    label="Level",
                    choices=["Beginner", "Intermediate", "Advanced"],
                    value="Intermediate"
                )

                gr.Markdown("### 📈 Session Info")

                stats_display = gr.Textbox(
                    label="Statistics",
                    value="📊 Session just started!\n🔢 Queries: 0\n⏱️ Time: 0 min",
                    interactive=False,
                    lines=4
                )

        # Event handlers
        def submit_and_clear(message, course, difficulty, history):
            new_history, cleared_input = process_message(message, course, difficulty, history)
            updated_stats = get_session_stats()
            return new_history, cleared_input, updated_stats

        # Connect events
        send_button.click(
            fn=submit_and_clear,
            inputs=[user_input, course_selector, difficulty_selector, chatbox],
            outputs=[chatbox, user_input, stats_display]
        )

        user_input.submit(
            fn=submit_and_clear,
            inputs=[user_input, course_selector, difficulty_selector, chatbox],
            outputs=[chatbox, user_input, stats_display]
        )

        activate_button.click(
            fn=activate_gemini,
            inputs=[api_input],
            outputs=[status_display]
        )

        clear_button.click(
            fn=clear_chat,
            outputs=[chatbox, status_display]
        )

        stats_button.click(
            fn=get_session_stats,
            outputs=[stats_display]
        )

        # Instructions
        gr.HTML("""
        <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #667eea;">
            <h4>🚀 Quick Start Guide:</h4>
            <ol>
                <li><strong>Try Demo Mode:</strong> Start asking questions right away!</li>
                <li><strong>Get API Key:</strong> Visit <a href="https://makersuite.google.com/app/apikey" target="_blank">Google AI Studio</a> (free)</li>
                <li><strong>Activate Gemini:</strong> Enter your API key and click "Activate Gemini AI"</li>
                <li><strong>Enhanced Learning:</strong> Get detailed, personalized AI responses!</li>
            </ol>
            <p><strong>💡 Example Questions:</strong> "Explain recursion", "Help with derivatives", "What is photosynthesis?"</p>
        </div>
        """)

    return demo

# Launch function
def launch_virtuta():
    """Launch VirtuTA interface"""
    print("🚀 Launching VirtuTA...")
    print("🎓 Virtual Teaching Assistant Ready!")

    interface = create_interface()
    interface.launch(share=True, debug=False)

    return interface

# Main execution
if __name__ == "__main__":
    app = launch_virtuta()
    print("\n✅ VirtuTA is running!")
    print("💡 Click the public URL to access your teaching assistant")

